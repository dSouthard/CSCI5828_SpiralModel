<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="UTF-8">
    <title>CSCI5828 Spiral Model by dSouthard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="stylesheets/normalize.css" media="screen">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen">
    <link rel="stylesheet" type="text/css" href="stylesheets/github-light.css" media="screen">
  </head>
  <body>
    <section class="page-header">
      <h1 class="project-name">CSCI 5828: The Spiral Model</h1>
      <h2 class="project-tagline">Diana Southard - Presentation 1</h2>
      <a href="index.html" class="btn">Return to Table of Contents</a><br>
      <a href="Phases.html" class="btn">Previous Section: Phases</a>
  <a href="Disadvantages.html" class="btn">Next Section: Disadvantages</a>
    </section>

    <section class="main-content">
      <h3>
<a id="the-spiral-model" class="anchor" href="#the-spiral-model" aria-hidden="true"><span class="octicon octicon-link"></span></a>Advantages</h3>

<p>The primary advantage of the spiral lifecycle model is the range of options that it allows. Since it behaves as a "process model generator," the spiral model is able to exploit all the advantages of other existing software develpoment lifecycles while simultaneously overcoming their major difficulties through it's risk-driven approach, as discussed in the history section. Because of this, the spiral model can be customized for each project's individual needs, and can look similar or equivalent to existing models, depending on the project's risk levels. This customization is vital because projects can be extremely dissimilar and the requirements for completion that work for one project may not be enough or may be too much for another project. </p>
<p>Another advantage is the early focus on options that involve the resuse of existing software. This is accomplished in the spiral model's steps involving identification and evaluation of alternatives. The risk analysis, validation, and commitment steps also focus on eliminating errors and unattractive alternatives early, reducing the effort that would have been required to uncover them later in developement. These early efforts allow for the extensive use of prototypes, which help clarify system requirements for higher code quality down the line.</p>
<p>The spiral model places emphasis on identifying all types of objectives and constraints during each round of the spiral. This provides a mechanism for incorporating software quality objectives into software produce development. </p>
<p>And, of course, because the requirements analysis phase is repeated each spiral, new elements of the product can be added in as they become available or known without disrupting the flow of developement. This flexibility towards changing requirements fits in with the real nature of software developement. It also helps avoid the "second-class citizen" status frequently associated with software maintenance, since there in no separate approach between software development and software maintenance/enhancement. System maintenance is simply treated as another turn around the spiral, having to undergo the same level of risk-analysis as all previous iterations of the software developement.</p> 
     </section>
     <section class="page-footer">
      <a href="index.html" class="btn">Return to Table of Contents</a>
      <a href="Phases.html" class="btn">Next Section: Activities/Phases</a>
    </section>
  </body>
</html>
